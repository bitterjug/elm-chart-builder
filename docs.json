[{"name":"Chart.Bar","comment":" This is the bar chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n    # Types\n    @docs BarSymbol, Data, DataGroupBand, Domain\n\n","unions":[],"aliases":[{"name":"BarSymbol","comment":" Bar chart symbol type\n","args":["msg"],"type":"Chart.Internal.Symbol.Symbol msg"},{"name":"Data","comment":" Format of the data, for bar charts it can only be dataBand\n\n    data : Bar.Data\n    data =\n        Bar.dataBand\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( \"a\", 10 )\n                    , ( \"b\", 13 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( \"a\", 11 )\n                    , ( \"b\", 23 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            ]\n\n","args":[],"type":"Chart.Internal.Type.Data"},{"name":"DataGroupBand","comment":" dataGroupBand data format\n\n    dataGroupBand : Bar.DataGroupBand\n    dataGroupBand =\n        { groupLabel = Just \"A\"\n        , points =\n            [ ( \"a\", 10 )\n            , ( \"b\", 13 )\n            , ( \"c\", 16 )\n            ]\n        }\n\n","args":[],"type":"Chart.Internal.Type.DataGroupBand"},{"name":"Domain","comment":" Domain Type\nFor bar charts this can only be of DomainBand type\n","args":[],"type":"Chart.Internal.Type.Domain"}],"values":[],"binops":[]},{"name":"Chart.Line","comment":" This is the line chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n    # Types\n    @docs Data , Domain\n\n    # API methods\n    @docs dataLinear, domainLinear, init, linearAxisCustomTickCount, linearAxisCustomTickFormat, linearAxisCustomTicks, render, setAxisHorizontalTickCount, setAxisHorizontalTickFormat, setAxisHorizontalTicks, setAxisVerticalTickCount, setAxisVerticalTickFormat, setAxisVerticalTicks, setDesc, setDimensions, setDomain, setHeight, setMargin, setShowHorizontalAxis, setShowVerticalAxis, setTitle, setWidth\n\n","unions":[],"aliases":[{"name":"Data","comment":" Format of the data\n\n    data : Data\n    data =\n        DataLinear\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( 1, 10 )\n                    , ( 2, 13 )\n                    , ( 16, 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( 1, 11 )\n                    , ( 2, 23 )\n                    , ( 3, 16 )\n                    ]\n              }\n            ]\n\n","args":[],"type":"Chart.Internal.Type.Data"},{"name":"Domain","comment":" Domain Type\nFor line charts this can only be of DomainLinear type\n(For now, DomainTime coming soon...)\n","args":[],"type":"Chart.Internal.Type.Domain"}],"values":[{"name":"dataLinear","comment":" dataLinear data format constructor\n\n    data : Data\n    data =\n        DataLinear\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( 1, 10 )\n                    , ( 2, 13 )\n                    , ( 16, 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( 1, 11 )\n                    , ( 2, 23 )\n                    , ( 3, 16 )\n                    ]\n              }\n            ]\n\n","type":"List.List Chart.Line.DataGroupLinear -> Chart.Line.Data"},{"name":"domainLinear","comment":" DomainLinear constructor\n\n    dummyDomainBandStruct : DomainBandStruct\n    dummyDomainBandStruct =\n        { bandGroup = []\n        , bandSingle = []\n        , linear = ( 0, 0 )\n        }\n\n    domain : Domain\n    domain =\n        domainBand dummyDomainBandStruct\n\n","type":"Chart.Internal.Type.DomainLinearStruct -> Chart.Line.Domain"},{"name":"init","comment":" Initializes the line chart\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n\n","type":"Chart.Line.Data -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"linearAxisCustomTickCount","comment":" Pass the number of ticks to Bar.setLinearAxisTickCount\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLinearAxisTickCount (CustomTickCount 5)\n\n","type":"Basics.Int -> Chart.Internal.Type.AxisContinousDataTickCount"},{"name":"linearAxisCustomTickFormat","comment":" A custom formatter for the continous data axis values\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLinearAxisTickFormat (Bar.linearAxisCustomTickFormat (FormatNumber.format { usLocale | decimals = 0 }))\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.AxisContinousDataTickFormat"},{"name":"linearAxisCustomTicks","comment":" Pass the ticks to Bar.setLinearAxisTicks\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLinearAxisTicks [ 1, 2, 3 ]\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.AxisContinousDataTicks"},{"name":"render","comment":" Renders the line chart, after initialisation and customisation\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.render\n\n","type":"( Chart.Line.Data, Chart.Internal.Type.Config ) -> Html.Html msg"},{"name":"setAxisHorizontalTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTickCount (CustomTickCount 5)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTickCount -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisHorizontalTickFormat","comment":" Sets the formatting for ticks in a grouped bar chart continous axis\nDefaults to `Scale.tickFormat`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTicks (CustomTickFormat .... TODO)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTickFormat -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisHorizontalTicks","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setHorizontalTicks (CustomTicks <| Scale.ticks linearScale 5)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTicks -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTickCount (CustomTickCount 5)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTickCount -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTickFormat","comment":" Sets the formatting for ticks in a grouped bar chart continous axis\nDefaults to `Scale.tickFormat`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTicks (CustomTickFormat .... TODO)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTickFormat -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTicks","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setAxisVerticalDataTicks (CustomTicks <| Scale.ticks linearScale 5)\n        |> Line.render\n\n","type":"Chart.Internal.Type.AxisContinousDataTicks -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDesc","comment":" Sets an accessible, long-text description for the svg chart.\nDefault value: \"\"\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDesc \"This is an accessible chart, with a desc element\"\n        |> Line.render\n\n","type":"String.String -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDimensions","comment":" Sets margin, width and height all at once\nPrefer this method from the individual ones when you need to set all three at once.\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDimensions\n            { margin = { top = 30, right = 20, bottom = 30, left = 0 }\n            , width = 400\n            , height = 400\n            }\n        |> Line.render\n\n","type":"{ margin : Chart.Internal.Type.Margin, width : Basics.Float, height : Basics.Float } -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDomain","comment":" Sets the domain value in the config\nIf not set, the domain is calculated from the data\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDomain (DomainLinear { horizontal = ( 1, 1 ), vertical = ( 0, 20 ) })\n        |> Line.render\n\n","type":"Chart.Line.Domain -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setHeight","comment":" Sets the outer height of the line chart\nDefault value: 400\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setHeight 600\n        |> Line.render\n\n","type":"Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setMargin","comment":" Sets the margin values in the config\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setMargin { top = 10, right = 10, bottom = 30, left = 30 }\n        |> Line.render\n\n","type":"Chart.Internal.Type.Margin -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setShowHorizontalAxis","comment":" Sets the showHorizontalAxis boolean value in the config\nDefault value: True\nThis shows the bar's horizontal axis\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Bar.setShowHorizontalAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setShowVerticalAxis","comment":" Sets the showVerticalAxis boolean value in the config\nDefault value: True\nThis shows the bar's vertical axis\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Bar.setShowVerticalAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setTitle","comment":" Sets an accessible title for the svg chart.\nDefault value: \"\"\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setTitle \"This is a chart\"\n        |> Line.render\n\n","type":"String.String -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setWidth","comment":" Sets the outer width of the line chart\nDefault value: 400\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setWidth 600\n        |> Line.render\n\n","type":"Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"}],"binops":[]}]