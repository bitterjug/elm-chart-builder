[{"name":"Chart.Bar","comment":" This is the bar chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n\n# Chart Data Format\n\n@docs DataGroupBand\n\n\n# Chart Initialization\n\n@docs init\n\n\n# Chart Rendering\n\n@docs render\n\n\n# Configuration setters\n\n@docs setDesc, setDimensions, setDomainBandGroup, setDomainBandSingle, setDomainLinear, setHeight, setLayout, setLinearAxisTickCount, setLinearAxisTickFormat, setLinearAxisTicks, setMargin, setOrientation, setShowContinousAxis, setShowOrdinalAxis, setTitle, setWidth\n\n\n# Configuration setters arguments\n\n@docs defaultGroupedConfig, divergingDirection, groupedLayout, horizontalOrientation, noDirection, stackedLayout, verticalOrientation\n\n\n# GroupedConfig setters\n\nThese a specific configurations for the Grouped layout\n\n@docs setIcons, setShowIndividualLabels\n\n\n# Chart icons\n\nIcons can be added to grouped bar charts to improve understanding and accessibility.\n\n    iconsCustom : List (Bar.BarSymbol msg)\n    iconsCustom =\n        [ Bar.symbolCustom\n            |> Bar.setSymbolIdentifier \"bicycle-symbol\"\n            |> Bar.setSymbolWidth 640\n            |> Bar.setSymbolHeight 512\n            |> Bar.setSymbolPaths [ bicycleSymbol ]\n        , Bar.symbolCustom\n            |> Bar.setSymbolIdentifier \"car-symbol\"\n            |> Bar.setSymbolWidth 640\n            |> Bar.setSymbolHeight 512\n            |> Bar.setSymbolPaths [ carSymbol ]\n        , Bar.symbolCustom\n            |> Bar.setSymbolIdentifier \"plane-symbol\"\n            |> Bar.setSymbolWidth 576\n            |> Bar.setSymbolHeight 512\n            |> Bar.setSymbolPaths [ planeSymbol ]\n        ]\n\n    groupedLayout =\n        Bar.groupedLayout\n            (Bar.defaultGroupedConfig\n                |> Bar.setIcons\n            )\n\n    Bar.init data\n        |> Bar.setLayout groupedLayout\n\n@docs BarSymbol, symbolCircle, symbolCorner, symbolCustom, symbolTriangle, setSymbolHeight, setSymbolIdentifier, setSymbolPaths, setSymbolUseGap, setSymbolWidth\n\n","unions":[],"aliases":[{"name":"BarSymbol","comment":" Bar chart symbol type\n","args":["msg"],"type":"Chart.Internal.Symbol.Symbol msg"},{"name":"DataGroupBand","comment":" Bar chart data format.\n\n    dataGroupBand : Bar.DataGroupBand\n    dataGroupBand =\n        { groupLabel = Just \"A\"\n        , points =\n            [ ( \"a\", 10 )\n            , ( \"b\", 13 )\n            , ( \"c\", 16 )\n            ]\n        }\n\n","args":[],"type":"Chart.Internal.Type.DataGroupBand"}],"values":[{"name":"defaultGroupedConfig","comment":" Default values for the Grouped Layout specific config\nUsed for initialization purposes\n\n    groupedConfig : GroupedConfig\n    groupedConfig =\n        Bar.defaultGroupedConfig\n            |> ChartType.setIcons (icons \"chart-a\")\n\n\n    Bar.init\n        |> Bar.setLayout (Bar.groupedLayout )\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.GroupedConfig"},{"name":"divergingDirection","comment":" Bar chart diverging layout\nIt is only used for stacked layouts\nAn example can be a population pyramid chart.\n\n    stackedLayout =\n        Bar.stackedLayout Bar.divergingDirection\n\n    Bar.init\n        |> Bar.setLayout stackedLayout\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Direction"},{"name":"groupedLayout","comment":" Grouped layout type\nThis is the default layout type\n\n    groupedLayout =\n        Bar.groupedLayout Bar.defaultGroupedConfig\n\n    Bar.init\n        |> Bar.setLayout groupedLayout\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.Layout"},{"name":"horizontalOrientation","comment":" Horizontal layout type\nUsed as argument to Bar.setOrientation\n\n    Bar.init\n        |> Bar.setOrientation horizontalOrientation\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Orientation"},{"name":"init","comment":" Initializes the bar chart with a default config.\n\n    Bar.init\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Config"},{"name":"noDirection","comment":" Bar chart no-direction layout\nIt is only used for stacked layouts\n\n    Bar.init\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Direction"},{"name":"render","comment":" Renders the bar chart, after initialisation and customisation.\n\n    data : List DataGroupBand\n    data =\n        [ { groupLabel = Nothing\n          , points = [ ( \"a\", 10 ) ]\n          }\n        ]\n\n    Bar.init\n        |> Bar.render data\n\n","type":"List.List Chart.Bar.DataGroupBand -> Chart.Internal.Type.Config -> Html.Html msg"},{"name":"setDesc","comment":" Sets an accessible, long-text description for the svg chart.\n\nDefault value: \"\"\n\n    Bar.init\n        |> Bar.setDesc \"This is an accessible chart, with a desc element\"\n        |> Bar.render data\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDimensions","comment":" Sets the margin, width and height all at once.\nPrefer this method from the individual ones when you need to set all three values at once.\n\n    margin =\n        { top = 30, right = 20, bottom = 30, left = 0 }\n\n    Bar.init\n        |> Bar.setDimensions\n            { margin = margin\n            , width = 400\n            , height = 400\n            }\n        |> Bar.render data\n\n","type":"{ margin : Chart.Internal.Type.Margin, width : Basics.Float, height : Basics.Float } -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDomainBandGroup","comment":" Sets the bandGroup value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.setDomainBandBandGroup [ \"0\" ]\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.BandDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDomainBandSingle","comment":" Sets the bandSingle value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.setDomainBandBandSingle [ \"a\", \"b\" ]\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.BandDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDomainLinear","comment":" Sets the bandLinear value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.setDomainBandLinear ( 0, 0.55 )\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.LinearDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setHeight","comment":" Sets the outer height of the bar chart.\n\nDefault value: 400\n\n    Bar.init\n        |> Bar.setHeight 600\n        |> Bar.render data\n\n","type":"Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setIcons","comment":" Sets the Icon Symbols list in the `GroupedConfig`.\n\nDefault value: []\n\nThese are additional symbols at the end of each bar in a group, for facilitating accessibility.\n\n    defaultGroupedConfig\n        |> setIcons [ Circle, Corner, Triangle ]\n\n","type":"List.List (Chart.Internal.Symbol.Symbol String.String) -> Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.GroupedConfig"},{"name":"setLayout","comment":" Sets the chart layout.\n\nValues: Bar.stackedLayout or Bar.groupedLayout\n\nDefault value: Bar.groupedLayout\n\n    Bar.init\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Layout -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setLinearAxisTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis.\n\nDefaults to `Scale.tickCount`\n\n    Bar.init\n        |> Bar.setLinearAxisTickCount 5\n        |> Bar.render data\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setLinearAxisTickFormat","comment":" Sets the formatting for the ticks in a grouped bar chart continous axis.\n\nDefaults to `Scale.tickFormat`\n\n    formatter =\n        FormatNumber.format { usLocale | decimals = 0 }\n\n    Bar.init\n        |> Bar.setLinearAxisTickFormat formatter\n        |> Bar.render data\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setLinearAxisTicks","comment":" Passes the tick values for a grouped bar chart continous axis.\n\nDefaults to `Scale.ticks`\n\n    Bar.init\n        |> Bar.setLinearAxisTicks [ 1, 2, 3 ]\n        |> Bar.render data\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setMargin","comment":" Sets the margin values in the config.\n\n    mar\n        { top = 30, right = 20, bottom = 30, left = 0 }\n\ndata\nBar.init data\n|> Bar.setMargin margin\n|> Bar.render\n\n","type":"Chart.Internal.Type.Margin -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setOrientation","comment":" Sets the orientation value in the config.\n\nDefault value: Vertical\n\n    Bar.init\n        |> Bar.setOrientation horizontalOrientation\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Orientation -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setShowContinousAxis","comment":" Sets the showContinousAxis boolean value in the config\nDefault value: True\nThis shows the bar's continous scale axis\n\n    Bar.init\n        |> Bar.setShowContinousAxis False\n        |> Bar.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setShowIndividualLabels","comment":" Sets the `showIndividualLabels` boolean value in the `GroupedConfig`.\n\nDefault value: `False`\n\nThis shows the bar's ordinal value at the end of the rect, not the linear value.\n\nIf used together with symbols, the label will be drawn on top of the symbol.\n\n&#9888; Use with caution, there is no knowledge of text wrapping!\n\nWith a vertical layout the available horizontal space is the width of the rects.\n\nWith an horizontal layout the available horizontal space is the right margin.\n\n    defaultGroupedConfig\n        |> Bar.setShowIndividualLabels True\n\n","type":"Basics.Bool -> Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.GroupedConfig"},{"name":"setShowOrdinalAxis","comment":" Sets the showOrdinalAxis boolean value in the config\nDefault value: True\nThis shows the bar's ordinal scale axis\n\n    Bar.init\n        |> Bar.setShowOrdinalAxis False\n        |> Bar.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setSymbolHeight","comment":" Set the custom symbol height\nWhen using a custom svg icon this is the 4th argument of its viewBox attribute\n","type":"Basics.Float -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolIdentifier","comment":" Set the custom symbol identifier\n","type":"String.String -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolPaths","comment":" Set the custom symbol paths\nWhen using a custom svg icon these are the d attribute of the path elements\n","type":"List.List String.String -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolUseGap","comment":" Set the useGap boolean flag.\n\nAll bar chart icons are drawn with a gap from the bar rectangles,\nbut, depending on the custom icon shape and on the orientation of the chart,\nthe icon could already have a gap and we do not want to add other space.\n\n","type":"Basics.Bool -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolWidth","comment":" Set the custom symbol width\nWhen using a custom svg icon this is the 3rd argument of its viewBox attribute\n","type":"Basics.Float -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setTitle","comment":" Sets an accessible title for the svg chart.\n\nDefault value: \"\"\n\n    Bar.init\n        |> Bar.setTitle \"This is a chart\"\n        |> Bar.render data\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setWidth","comment":" Sets the outer width of the bar chart.\n\nDefault value: 600\n\n    Bar.init\n        |> Bar.setWidth 800\n        |> Bar.render data\n\n","type":"Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"stackedLayout","comment":" Stacked layout type\nStacked layouts can not have icons\n\n    Bar.init\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Direction -> Chart.Internal.Type.Layout"},{"name":"symbolCircle","comment":" Circle symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"symbolCorner","comment":" Corner symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"symbolCustom","comment":" A custom bar chart symbol type\n","type":"Chart.Bar.BarSymbol msg"},{"name":"symbolTriangle","comment":" Triangle symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"verticalOrientation","comment":" Vertical layout type\nUsed as argument to Bar.setOrientation\nThis is the default layout\n\n    Bar.init\n        |> Bar.setOrientation verticalOrientation\n        |> Bar.render data\n\n","type":"Chart.Internal.Type.Orientation"}],"binops":[]},{"name":"Chart.Line","comment":" This is the line chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n&#9888; This module is still a work in progress and it has limited funcionality!\n\n\n# Chart Data Format\n\n@docs DataGroupLinear\n\n\n# Chart Initialization\n\n@docs init\n\n\n# Chart Rendering\n\n@docs render\n\n\n# Configuration setters\n\n@docs setAxisHorizontalTickCount, setAxisHorizontalTickFormat, setAxisHorizontalTicks, setAxisVerticalTickCount, setAxisVerticalTickFormat, setAxisVerticalTicks, setDesc, setDimensions, setDomain, setHeight, setMargin, setShowHorizontalAxis, setShowVerticalAxis, setTitle, setWidth\n\n","unions":[],"aliases":[{"name":"DataGroupLinear","comment":" Line chart data format.\n\n    dataGroupLinear : Bar.DataGroupLinear\n    dataGroupLinear =\n        { groupLabel = Just \"A\"\n        , points =\n            [ ( 1, 10 )\n            , ( 2, 13 )\n            , ( 16, 16 )\n            ]\n        }\n\n","args":[],"type":"Chart.Internal.Type.DataGroupLinear"}],"values":[{"name":"init","comment":" Initializes the line chart with a default config\n\n    Line.init\n        |> Line.render data\n\n","type":"Chart.Internal.Type.Config"},{"name":"render","comment":" Renders the line chart, after initialisation and customisation\n\n    data : List DataGroupLinear\n    data =\n        [ { groupLabel = Nothing\n          , points = [ ( 1, 10 ), (2, 20) ]\n          }\n        ]\n\n    Line.init data\n        |> Line.render data\n\n","type":"List.List Chart.Line.DataGroupLinear -> Chart.Internal.Type.Config -> Html.Html msg"},{"name":"setAxisHorizontalTickCount","comment":" Sets the approximate number of ticks for the horizontal axis\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.setContinousDataTickCount 5\n        |> Line.render data\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setAxisHorizontalTickFormat","comment":" Sets the formatting for ticks for the horizontal axis\nDefaults to `Scale.tickFormat`\n\n    Line.init\n        |> Line.setContinousDataTicks (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render data\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setAxisHorizontalTicks","comment":" Set the ticks for the horizontal axis\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.setHorizontalTicks [ 1, 2, 3 ]\n        |> Line.render data\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setAxisVerticalTickCount","comment":" Sets the approximate number of ticks for the vertical axis\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.setContinousDataTickCount 5\n        |> Line.render data\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setAxisVerticalTickFormat","comment":" Sets the formatting for ticks in the vertical axis\nDefaults to `Scale.tickFormat`\n\n    Line.init\n        |> Line.setContinousDataTicks (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render data\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setAxisVerticalTicks","comment":" Set the ticks for the vertical axis\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.setAxisVerticalDataTicks [ 1, 2, 3 ]\n        |> Line.render data\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDesc","comment":" Sets an accessible, long-text description for the svg chart.\nDefault value: \"\"\n\n    Line.init\n        |> Line.setDesc \"This is an accessible chart, with a desc element\"\n        |> Line.render data\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDimensions","comment":" Sets margin, width and height all at once\nPrefer this method from the individual ones when you need to set all three at once.\n\n    margin =\n        { top = 30, right = 20, bottom = 30, left = 0 }\n\n    Line.init\n        |> Line.setDimensions\n            { margin = margin\n            , width = 400\n            , height = 400\n            }\n        |> Line.render data\n\n","type":"{ margin : Chart.Internal.Type.Margin, width : Basics.Float, height : Basics.Float } -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setDomain","comment":" Sets the domain value in the config\nIf not set, the domain is calculated from the data\n\n    Line.init\n        |> Line.setDomain (DomainLinear { horizontal = ( 1, 1 ), vertical = ( 0, 20 ) })\n        |> Line.render data\n\n","type":"Chart.Internal.Type.DomainLinear -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setHeight","comment":" Sets the outer height of the line chart\nDefault value: 400\n\n    Line.init\n        |> Line.setHeight 600\n        |> Line.render data\n\n","type":"Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setMargin","comment":" Sets the margin values in the config\n\n    margin =\n        { top = 30, right = 20, bottom = 30, left = 0 }\n\n    Line.init\n        |> Line.setMargin margin\n        |> Line.render data\n\n","type":"Chart.Internal.Type.Margin -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setShowHorizontalAxis","comment":" Sets the showHorizontalAxis boolean value in the config\nDefault value: True\nThis shows the bar's horizontal axis\n\n    Line.init\n        |> Bar.setShowHorizontalAxis False\n        |> Bar.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setShowVerticalAxis","comment":" Sets the showVerticalAxis boolean value in the config\nDefault value: True\nThis shows the bar's vertical axis\n\n    Line.init\n        |> Bar.setShowVerticalAxis False\n        |> Bar.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setTitle","comment":" Sets an accessible title for the svg chart.\nDefault value: \"\"\n\n    Line.init\n        |> Line.setTitle \"This is a chart\"\n        |> Line.render data\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"setWidth","comment":" Sets the outer width of the line chart\nDefault value: 400\n\n    Line.init\n        |> Line.setWidth 600\n        |> Line.render data\n\n","type":"Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"}],"binops":[]}]