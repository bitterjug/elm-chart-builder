[{"name":"Chart.Bar","comment":" This is the bar chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n\n# Types\n\n@docs BarSymbol, Data, DataGroupBand, Domain\n\n\n# API methods\n\n@docs dataBand, defaultGroupedConfig, divergingDirection, domainBand, getDomainFromData, groupedLayout, horizontalOrientation, init, noDirection, render, setDesc, setDimensions, setDomain, setDomainBandGroup, setDomainBandSingle, setDomainLinear, setHeight, setIcons, setLayout, setLinearAxisTickCount, setLinearAxisTickFormat, setLinearAxisTicks, setMargin, setOrientation, setShowContinousAxis, setShowIndividualLabels, setShowOrdinalAxis, setSymbolHeight, setSymbolIdentifier, setSymbolPaths, setSymbolUseGap, setSymbolWidth, setTitle, setWidth, stackedLayout, symbolCircle, symbolCorner, symbolCustom, symbolTriangle, verticalOrientation\n\n","unions":[],"aliases":[{"name":"BarSymbol","comment":" Bar chart symbol type\n","args":["msg"],"type":"Chart.Internal.Symbol.Symbol msg"},{"name":"Data","comment":" Format of the data, for bar charts it can only be dataBand\n\n    data : Bar.Data\n    data =\n        Bar.dataBand\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( \"a\", 10 )\n                    , ( \"b\", 13 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( \"a\", 11 )\n                    , ( \"b\", 23 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            ]\n\n","args":[],"type":"Chart.Internal.Type.Data"},{"name":"DataGroupBand","comment":" dataGroupBand data format\n\n    dataGroupBand : Bar.DataGroupBand\n    dataGroupBand =\n        { groupLabel = Just \"A\"\n        , points =\n            [ ( \"a\", 10 )\n            , ( \"b\", 13 )\n            , ( \"c\", 16 )\n            ]\n        }\n\n","args":[],"type":"Chart.Internal.Type.DataGroupBand"},{"name":"Domain","comment":" Domain Type\nFor bar charts this can only be of DomainBand type\n","args":[],"type":"Chart.Internal.Type.Domain"}],"values":[{"name":"dataBand","comment":" dataBand data format constructor\n\n    data : Bar.Data\n    data =\n        Bar.dataBand\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( \"a\", 10 )\n                    , ( \"b\", 13 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( \"a\", 11 )\n                    , ( \"b\", 23 )\n                    , ( \"c\", 16 )\n                    ]\n              }\n            ]\n\n","type":"List.List Chart.Bar.DataGroupBand -> Chart.Bar.Data"},{"name":"defaultGroupedConfig","comment":" Default values for the Grouped Layout specific config\nUsed for initialization purposes\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.groupedLayout (Bar.defaultGroupedConfig |> ChartType.setIcons (icons \"chart-a\")))\n\n","type":"Chart.Internal.Type.GroupedConfig"},{"name":"divergingDirection","comment":" Bar chart diverging layout\nIt is only used for stacked layouts\nAn example can be a population pyramid chart.\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.stackedLayout Bar.divergingDirection)\n\n","type":"Chart.Internal.Type.Direction"},{"name":"domainBand","comment":" DomainBand constructor\n\n    dummyDomainBandStruct : DomainBandStruct\n    dummyDomainBandStruct =\n        { bandGroup = []\n        , bandSingle = []\n        , linear = ( 0, 0 )\n        }\n\n    domain : Domain\n    domain =\n        domainBand dummyDomainBandStruct\n\n","type":"Chart.Internal.Type.DomainBandStruct -> Chart.Bar.Domain"},{"name":"getDomainFromData","comment":" Calculate the domains from the data\nThis is what happens under the hood when creating a chart without explicitly passig a domain\n","type":"Chart.Bar.Data -> Chart.Bar.Domain"},{"name":"groupedLayout","comment":" Grouped layout type\nThis is the default layout type\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.groupedLayout Bar.defaultGroupedConfig)\n\n","type":"Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.Layout"},{"name":"horizontalOrientation","comment":" Horizontal layout type\nUsed as argument to Bar.setOrientation\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setOrientation horizontalOrientation\n\n","type":"Chart.Internal.Type.Orientation"},{"name":"init","comment":" Initializes the bar chart\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n\n","type":"Chart.Bar.Data -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"noDirection","comment":" Bar chart no-direction layout\nIt is only used for stacked layouts\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n\n","type":"Chart.Internal.Type.Direction"},{"name":"render","comment":" Renders the bar chart, after initialisation and customisation\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.render\n\n","type":"( Chart.Bar.Data, Chart.Internal.Type.Config ) -> Html.Html msg"},{"name":"setDesc","comment":" Sets an accessible, long-text description for the svg chart.\nDefault value: \"\"\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDesc \"This is an accessible chart, with a desc element\"\n        |> Bar.render\n\n","type":"String.String -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setDimensions","comment":" Sets margin, width and height all at once\nPrefer this method from the individual ones when you need to set all three at once.\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDimensions\n            { margin = { top = 30, right = 20, bottom = 30, left = 0 }\n            , width = 400\n            , height = 400\n            }\n        |> Bar.render\n\n","type":"{ margin : Chart.Internal.Type.Margin, width : Basics.Float, height : Basics.Float } -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setDomain","comment":" Sets the domain value in the config\nIf not set, the domain is calculated from the data\nInstead of setDomain, it is usually more convenient use one of the more specific methods:\nsetDomainBandBandGroup, setDomainBandBandSingle, setDomainBandLinear\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDomain (domainBand { bandGroup = [ \"0\" ], bandSingle = [ \"a\" ], linear = ( 0, 100 ) })\n        |> Bar.render\n\n","type":"Chart.Bar.Domain -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setDomainBandGroup","comment":" Sets the bandGroup value in the domain directly,\nin place of calculating it from the data.\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDomainBandBandGroup [ \"0\" ]\n        |> Bar.render\n\n","type":"Chart.Internal.Type.BandDomain -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setDomainBandSingle","comment":" Sets the bandSingle value in the domain directly,\nin place of calculating it from the data.\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDomainBandBandSingle [ \"a\", \"b\" ]\n        |> Bar.render\n\n","type":"Chart.Internal.Type.BandDomain -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setDomainLinear","comment":" Sets the bandLinear value in the domain directly,\nin place of calculating it from the data.\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setDomainBandLinear ( 0, 0.55 )\n        |> Bar.render\n\n","type":"Chart.Internal.Type.LinearDomain -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setHeight","comment":" Sets the outer height of the bar chart\nDefault value: 400\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setHeight 600\n        |> Bar.render\n\n","type":"Basics.Float -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setIcons","comment":" Sets the Icon Symbol list in the grouped config\nDefault value: []\nThese are additional symbols at the end of each bar in a group, for facilitating accessibility\n\n    defaultGroupedConfig\n        |> setIcons [ Circle, Corner, Triangle ]\n\n","type":"List.List (Chart.Internal.Symbol.Symbol String.String) -> Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.GroupedConfig"},{"name":"setLayout","comment":" Sets the chart layout\nValues: Bar.stackedLayout or Bar.groupedLayout\nDefault value: Bar.groupedLayout\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n        |> Bar.render\n\n","type":"Chart.Internal.Type.Layout -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setLinearAxisTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.tickCount`\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLinearAxisTickCount 5\n        |> Bar.render\n\n","type":"Basics.Int -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setLinearAxisTickFormat","comment":" Sets the formatting for ticks in a grouped bar chart continous axis\nDefaults to `Scale.tickFormat`\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLinearAxisTickFormat (FormatNumber.format { usLocale | decimals = 0 })\n        |> Bar.render\n\n","type":"(Basics.Float -> String.String) -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setLinearAxisTicks","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setContinousDataTicks [ 1, 2, 3 ]\n        |> Bar.render\n\n","type":"List.List Basics.Float -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setMargin","comment":" Sets the margin values in the config\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setMargin { top = 10, right = 10, bottom = 30, left = 30 }\n        |> Bar.render\n\n","type":"Chart.Internal.Type.Margin -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setOrientation","comment":" Sets the orientation value in the config\nDefault value: Vertical\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setMargin { top = 10, right = 20, bottom = 25, left = 35 }\n        |> Bar.render\n\n","type":"Chart.Internal.Type.Orientation -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setShowContinousAxis","comment":" Sets the showContinousAxis boolean value in the config\nDefault value: True\nThis shows the bar's continous scale axis\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setShowContinousAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setShowIndividualLabels","comment":" Sets the showIndividualLabels boolean value in the grouped config\nDefault value: False\nThis shows the bar's ordinal value at the end of the rect, not the linear value.\nIf used together with symbols, the label will be drawn on top of the symbol.\nUse with caution, there is no knowledge of text wrapping.\nWith a vertical layout the available horizontal space is the width of the rects.\nWith an horizontal layout the available horizontal space is the right margin.\n\n    defaultGroupedConfig\n        |> Bar.setShowIndividualLabels True\n\n","type":"Basics.Bool -> Chart.Internal.Type.GroupedConfig -> Chart.Internal.Type.GroupedConfig"},{"name":"setShowOrdinalAxis","comment":" Sets the showOrdinalAxis boolean value in the config\nDefault value: True\nThis shows the bar's ordinal scale axis\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setShowOrdinalAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setSymbolHeight","comment":" Set the custom symbol height\nWhen using a custom svg icon this is the 4th argument of its viewBox attribute\n","type":"Basics.Float -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolIdentifier","comment":" Set the custom symbol identifier\n","type":"String.String -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolPaths","comment":" Set the custom symbol paths\nWhen using a custom svg icon these are the d attribute of the path elements\n","type":"List.List String.String -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolUseGap","comment":" Set the useGap boolean flag\nAll bar chart icons are drawn with a gap from the bar rectangles,\nbut, depending on the custom icon shape and on the orientation of the chart,\nthe icon could already have a gap and we do not want to add other space.\n","type":"Basics.Bool -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setSymbolWidth","comment":" Set the custom symbol width\nWhen using a custom svg icon this is the 3rd argument of its viewBox attribute\n","type":"Basics.Float -> Chart.Bar.BarSymbol msg -> Chart.Bar.BarSymbol msg"},{"name":"setTitle","comment":" Sets an accessible title for the svg chart.\nDefault value: \"\"\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setTitle \"This is a chart\"\n        |> Bar.render\n\n","type":"String.String -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"setWidth","comment":" Sets the outer width of the bar chart\nDefault value: 600\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setWidth 800\n        |> Bar.render\n\n","type":"Basics.Float -> ( Chart.Bar.Data, Chart.Internal.Type.Config ) -> ( Chart.Bar.Data, Chart.Internal.Type.Config )"},{"name":"stackedLayout","comment":" Stacked layout type\nStacked layouts can not have icons\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setLayout (Bar.stackedLayout Bar.noDirection)\n\n","type":"Chart.Internal.Type.Direction -> Chart.Internal.Type.Layout"},{"name":"symbolCircle","comment":" Circle symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"symbolCorner","comment":" Corner symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"symbolCustom","comment":" A custom bar chart symbol type\n","type":"Chart.Bar.BarSymbol msg"},{"name":"symbolTriangle","comment":" Triangle symbol type\n","type":"String.String -> Chart.Bar.BarSymbol msg"},{"name":"verticalOrientation","comment":" Vertical layout type\nUsed as argument to Bar.setOrientation\nThis is the default layout\n\n    Bar.init (DataBand [ { groupLabel = Nothing, points = [ ( \"a\", 10 ) ] } ])\n        |> Bar.setOrientation verticalOrientation\n\n","type":"Chart.Internal.Type.Orientation"}],"binops":[]},{"name":"Chart.Line","comment":" This is the line chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\n&#9888; This module is still a work in progress!\n\n\n# Types\n\n@docs Data, Domain\n\n\n# API methods\n\n@docs dataLinear, domainLinear, init, render, setAxisHorizontalTickCount, setAxisHorizontalTickFormat, setAxisHorizontalTicks, setAxisVerticalTickCount, setAxisVerticalTickFormat, setAxisVerticalTicks, setDesc, setDimensions, setDomain, setHeight, setMargin, setShowHorizontalAxis, setShowVerticalAxis, setTitle, setWidth\n\n","unions":[],"aliases":[{"name":"Data","comment":" Format of the data\n\n    data : Data\n    data =\n        DataLinear\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( 1, 10 )\n                    , ( 2, 13 )\n                    , ( 16, 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( 1, 11 )\n                    , ( 2, 23 )\n                    , ( 3, 16 )\n                    ]\n              }\n            ]\n\n","args":[],"type":"Chart.Internal.Type.Data"},{"name":"Domain","comment":" Domain Type\nFor line charts this can only be of DomainLinear type\n(For now, DomainTime coming soon...)\n","args":[],"type":"Chart.Internal.Type.Domain"}],"values":[{"name":"dataLinear","comment":" dataLinear data format constructor\n\n    data : Data\n    data =\n        DataLinear\n            [ { groupLabel = Just \"A\"\n              , points =\n                    [ ( 1, 10 )\n                    , ( 2, 13 )\n                    , ( 16, 16 )\n                    ]\n              }\n            , { groupLabel = Just \"B\"\n              , points =\n                    [ ( 1, 11 )\n                    , ( 2, 23 )\n                    , ( 3, 16 )\n                    ]\n              }\n            ]\n\n","type":"List.List Chart.Line.DataGroupLinear -> Chart.Line.Data"},{"name":"domainLinear","comment":" DomainLinear constructor\n\n    dummyDomainBandStruct : DomainBandStruct\n    dummyDomainBandStruct =\n        { bandGroup = []\n        , bandSingle = []\n        , linear = ( 0, 0 )\n        }\n\n    domain : Domain\n    domain =\n        domainBand dummyDomainBandStruct\n\n","type":"Chart.Internal.Type.DomainLinearStruct -> Chart.Line.Domain"},{"name":"init","comment":" Initializes the line chart\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n\n","type":"Chart.Line.Data -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"render","comment":" Renders the line chart, after initialisation and customisation\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.render\n\n","type":"( Chart.Line.Data, Chart.Internal.Type.Config ) -> Html.Html msg"},{"name":"setAxisHorizontalTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTickCount 5\n        |> Line.render\n\n","type":"Basics.Int -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisHorizontalTickFormat","comment":" Sets the formatting for ticks in a grouped bar chart continous axis\nDefaults to `Scale.tickFormat`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTicks (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render\n\n","type":"(Basics.Float -> String.String) -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisHorizontalTicks","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setHorizontalTicks [ 1, 2, 3 ]\n        |> Line.render\n\n","type":"List.List Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTickCount 5\n        |> Line.render\n\n","type":"Basics.Int -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTickFormat","comment":" Sets the formatting for ticks in a grouped bar chart continous axis\nDefaults to `Scale.tickFormat`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setContinousDataTicks (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render\n\n","type":"(Basics.Float -> String.String) -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setAxisVerticalTicks","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis\nDefaults to `Scale.ticks`\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setAxisVerticalDataTicks [ 1, 2, 3 ]\n        |> Line.render\n\n","type":"List.List Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDesc","comment":" Sets an accessible, long-text description for the svg chart.\nDefault value: \"\"\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDesc \"This is an accessible chart, with a desc element\"\n        |> Line.render\n\n","type":"String.String -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDimensions","comment":" Sets margin, width and height all at once\nPrefer this method from the individual ones when you need to set all three at once.\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDimensions\n            { margin = { top = 30, right = 20, bottom = 30, left = 0 }\n            , width = 400\n            , height = 400\n            }\n        |> Line.render\n\n","type":"{ margin : Chart.Internal.Type.Margin, width : Basics.Float, height : Basics.Float } -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setDomain","comment":" Sets the domain value in the config\nIf not set, the domain is calculated from the data\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setDomain (DomainLinear { horizontal = ( 1, 1 ), vertical = ( 0, 20 ) })\n        |> Line.render\n\n","type":"Chart.Line.Domain -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setHeight","comment":" Sets the outer height of the line chart\nDefault value: 400\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setHeight 600\n        |> Line.render\n\n","type":"Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setMargin","comment":" Sets the margin values in the config\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setMargin { top = 10, right = 10, bottom = 30, left = 30 }\n        |> Line.render\n\n","type":"Chart.Internal.Type.Margin -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setShowHorizontalAxis","comment":" Sets the showHorizontalAxis boolean value in the config\nDefault value: True\nThis shows the bar's horizontal axis\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Bar.setShowHorizontalAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setShowVerticalAxis","comment":" Sets the showVerticalAxis boolean value in the config\nDefault value: True\nThis shows the bar's vertical axis\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Bar.setShowVerticalAxis False\n        |> Bar.render\n\n","type":"Basics.Bool -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setTitle","comment":" Sets an accessible title for the svg chart.\nDefault value: \"\"\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setTitle \"This is a chart\"\n        |> Line.render\n\n","type":"String.String -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"},{"name":"setWidth","comment":" Sets the outer width of the line chart\nDefault value: 400\n\n    Line.init (DataLinear [ { groupLabel = Nothing, points = [ ( 0, 10 ), ( 1, 20 ) ] } ])\n        |> Line.setWidth 600\n        |> Line.render\n\n","type":"Basics.Float -> ( Chart.Line.Data, Chart.Internal.Type.Config ) -> ( Chart.Line.Data, Chart.Internal.Type.Config )"}],"binops":[]}]