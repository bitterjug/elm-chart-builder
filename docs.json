[{"name":"Chart.Bar","comment":" This is the bar chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\nThe Bar module expects the X axis to plot grouped ordinal data and the Y axis to plot linear data.\n\n\n# Chart Data Format\n\n@docs Accessor\n\n\n# Chart Initialization\n\n@docs init\n\n\n# Chart Rendering\n\n@docs render\n\n\n# Configuration\n\n@docs withTitle, withDesc, withColorPalette, withColorInterpolator, withBandGroupDomain, withBandSingleDomain, withLinearDomain, withYAxisTickCount, withYAxisTickFormat, withYAxisTicks, withOrientation, withXAxis, withYAxis, withGroupedLayout, withStackedLayout\n\n\n# Configuration arguments\n\n@docs noDirection, diverging, horizontal, vertical\n\n\n# LayoutConfig\n\nThese a specific configurations for the Grouped layout\n\n@docs withSymbols, withIndividualLabels\n\n","unions":[],"aliases":[{"name":"Accessor","comment":" The data accessors\n","args":["data"],"type":"{ xGroup : data -> String.String, xValue : data -> String.String, yValue : data -> Basics.Float }"}],"values":[{"name":"diverging","comment":" Diverging layout for stacked bar charts\n\nAn example can be a population pyramid chart.\n\n    Bar.init\n        |> Bar.withStackedLayout Bar.diverging\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Direction"},{"name":"horizontal","comment":" Horizontal layout type\n\nUsed as argument to Bar.withOrientation\n\n    Bar.init\n        |> Bar.withOrientation horizontal\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Orientation"},{"name":"init","comment":" Initializes the bar chart passing margin, width and height, whith a default config.\n\n    data : List {groupLabel : String, x : String, y : Float  }\n    data =\n        [ { groupLabel = \"A\"\n          , x = \"a\"\n          , y = 10\n          }\n        , { groupLabel = \"B\"\n          , x = \"a\"\n          , y = 11\n          }\n        ]\n\n    accessor : Bar.Accessor {groupLabel : String, x : String, y : Float  }\n    accessor =\n        Bar.Accessor .groupLabel .x .y\n\n    Bar.init\n        { margin = margin\n        , width = width\n        , height = height\n        }\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Bar.RequiredConfig -> Chart.Internal.Type.Config"},{"name":"noDirection","comment":" Default layout for stacked bar charts, where tha bars are sequentially stacked\none upon another.\n\n    Bar.init\n        |> Bar.withStackedLayout Bar.noDirection\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Direction"},{"name":"render","comment":" Renders the bar chart, after initialisation and customisation.\n\n    Bar.init\n        |> Bar.render ( data, accessor )\n\n","type":"( List.List data, Chart.Bar.Accessor data ) -> Chart.Internal.Type.Config -> Html.Html msg"},{"name":"vertical","comment":" Vertical layout type\n\nUsed as argument to Bar.withOrientation\nThis is the default layout\n\n    Bar.init\n        |> Bar.withOrientation vertical\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Orientation"},{"name":"withBandGroupDomain","comment":" Sets the bandGroup value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.withBandGroupDomain [ \"0\" ]\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.BandDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withBandSingleDomain","comment":" Sets the bandSingle value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.withDomainBandBandSingle [ \"a\", \"b\" ]\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.BandDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withColorInterpolator","comment":" Sets the color interpolator for the chart.\n\nThis option is not supported for stacked bar charts and will have no effect on them.\n\n    Bar.init\n        |> Bar.withColorInterpolator Scale.Color.plasmaInterpolator\n        |> Bar.render ( data, accessor )\n\n","type":"(Basics.Float -> Color.Color) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withColorPalette","comment":" Sets the color palette for the chart.\n\n    palette =\n        Scale.Color.tableau10\n\n    Bar.init\n        |> Bar.withColorPalette palette\n        |> Bar.render (data, accessor)\n\n","type":"List.List Color.Color -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withDesc","comment":" Sets an accessible, long-text description for the svg chart.\n\nIt defaults to an empty string.\nThis shuld be set if no title nor description exists for the chart, for example in a sparkline.\n\n    Bar.init\n        |> Bar.withDesc \"This is an accessible chart, with a desc element\"\n        |> Bar.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withGroupedLayout","comment":" Creates a grouped bar chart.\n\n    Bar.init\n        |> Bar.withGroupedLayout\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withIndividualLabels","comment":" Show or hide bar labels in the bar chart groups.\n\nDefault value: `False`\n\nThis shows the bar's ordinal value at the end of the rect, not the linear value.\n\nIf used together with symbols, the label will be drawn on top of the symbol.\n\n&#9888; Use with caution, there is no knowledge of text wrapping!\n\nWith a vertical layout the available horizontal space is the width of the rects.\n\nWith an horizontal layout the available horizontal space is the right margin.\n\n    defaultLayoutConfig\n        |> Bar.withIndividualLabels True\n\n","type":"Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withLinearDomain","comment":" Sets the bandLinear value in the domain, in place of calculating it from the data.\n\n    Bar.init\n        |> Bar.withDomainBandLinear ( 0, 0.55 )\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.LinearDomain -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withOrientation","comment":" Sets the orientation value.\n\nAccepts: horizontal or vertical\nDefault value: vertical\n\n    Bar.init\n        |> Bar.withOrientation horizontal\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Orientation -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withStackedLayout","comment":" Creates a stacked bar chart.\n\nIt takes a direction: `diverging` or `noDirection`\n\n    layout : Config -> Config\n    layout =\n        Bar.withStackedLayout Bar.diverging\n\n    Bar.init\n        |> layout\n        |> Bar.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Direction -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withSymbols","comment":" Sets the Icon Symbols list in the `LayoutConfig`.\n\nDefault value: []\n\nThese are additional symbols at the end of each bar in a group, for facilitating accessibility.\n\n    defaultLayoutConfig\n        |> withSymbols [ Circle, Corner, Triangle ]\n\n","type":"List.List Chart.Internal.Symbol.Symbol -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withTitle","comment":" Sets an accessible title for the svg chart.\n\nIt defaults to an empty string.\nThis shuld be set if no title nor description exists for the chart, for example in a sparkline.\n\n    Bar.init\n        |> Bar.withTitle \"This is a chart\"\n        |> Bar.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXAxis","comment":" Show or hide the X aixs\n\nDefault value: True\n\nThe X axis depends from the layout:\nWith a vertical layout the X axis is the horizontal axis.\nWith a horizontal layout the X axis is the vertical axis.\n\n    Bar.init\n        |> Bar.withXAxis False\n        |> Bar.render ( data, accessor )\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxis","comment":" Show or hide the Y aixs\n\nDefault value: True\n\nThe Y axis depends from the layout:\nWith a vertical layout the Y axis is the vertical axis.\nWith a horizontal layout the Y axis is the horizontal axis.\n\n    Bar.init\n        |> Bar.withYAxis False\n        |> Bar.render ( data, accessor )\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisTickCount","comment":" Sets the approximate number of ticks for a grouped bar chart continous axis.\n\nDefaults to elm-visualization `Scale.tickCount`\n\n    Bar.init\n        |> Bar.withYAxisTickCount 5\n        |> Bar.render ( data, accessor )\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisTickFormat","comment":" Sets the formatting for the ticks in a grouped bar chart continous axis.\n\nDefaults to elm-visualization `Scale.tickFormat`\n\n    formatter =\n        FormatNumber.format { usLocale | decimals = 0 }\n\n    Bar.init\n        |> Bar.withYAxisTickFormat formatter\n        |> Bar.render (data, accessor)\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisTicks","comment":" Passes the tick values for a grouped bar chart continous axis.\n\nDefaults to elm-visualization `Scale.ticks`\n\n    Bar.init\n        |> Bar.withYAxisTicks [ 1, 2, 3 ]\n        |> Bar.render ( data, accessor )\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"}],"binops":[]},{"name":"Chart.HistogramBar","comment":" This is the histogram chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\nThe histogram bar chart can both generate the histogram data or accept some preprocessed data.\n\n\n# Data Accessors\n\n@docs dataAccessor, preProcessedDataAccessor, initHistogramConfig\n\n\n# Chart Initialization\n\n@docs init\n\n\n# Chart Rendering\n\n@docs render\n\n\n# Configuration setters\n\n@docs withDomain, withSteps, withColor, withTitle, withDesc, withYAxisTickFormat\n\n","unions":[],"aliases":[],"values":[{"name":"dataAccessor","comment":" The data accessor for generating a histogram.\nIt takes a config that is separate from the general config, because it is only used when generating a histogram and\nnot for bucketed pre-processed data.\n\n    histoConfig =\n        Histo.initHistogramConfig\n            |> Histo.withSteps [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ]\n\n    dataAccessor =\n        Histo.dataAccessor histoConfig accessor\n\n","type":"Chart.Internal.Type.HistogramConfig -> (data -> Basics.Float) -> Chart.Internal.Type.AccessorHistogram data"},{"name":"init","comment":" Initializes the histogram bar chart with a default config.\n\n    Histo.init\n        |> Histo.render ( data, accessor )\n\n","type":"Chart.HistogramBar.RequiredConfig -> Chart.Internal.Type.Config"},{"name":"initHistogramConfig","comment":" Initialises the config for the histogram data accessor.\nThis is separate from the general config, because it is only used when generating a histogram,\nnot for pre-processed data that has been already bucketed.\n\n    histoConfig =\n        Histo.initHistogramConfig\n\n","type":"Chart.Internal.Type.HistogramConfig"},{"name":"preProcessedDataAccessor","comment":" The data accessor for generating a histogram from pre-processed data.\nMeaning the data has already been bucketed and counted.\n`values` here is not used and always passed as an empty array.\n\n    preProcessedDataAccessor =\n        Histo.preProcessedDataAccessor\n            (\\d ->\n                { x0 = d.bucket\n                , x1 = d.bucket + 0.1\n                , values = []\n                , length = d.count\n                }\n            )\n\n","type":"(data -> Histogram.Bin Basics.Float Basics.Float) -> Chart.Internal.Type.AccessorHistogram data"},{"name":"render","comment":" Renders the histogram\n\n    Histo.init\n        |> Histo.render ( data, accessor )\n\n","type":"( List.List data, Chart.Internal.Type.AccessorHistogram data ) -> Chart.Internal.Type.Config -> Html.Html msg"},{"name":"withColor","comment":" Set the histogram color\n\n    Histo.init\n        |> Histo.withColor (Color.rgb255 240 59 32)\n        |> Histo.render ( data, accessor )\n\n","type":"Color.Color -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withDesc","comment":" Sets an accessible, long-text description for the svg chart.\nDefault value: \"\"\n\n    Histo.init\n        |> Histo.withDesc \"This is an accessible chart, with a desc element\"\n        |> Histo.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withDomain","comment":" Set the domain for the HistogramGenerator.\nAll values falling outside the domain will be ignored.\n\n    Histo.init\n        |> Histo.withDomain ( 0, 1 )\n        |> Histo.render ( data, accessor )\n\n","type":"( Basics.Float, Basics.Float ) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withSteps","comment":" Set the histogram steps in the config for the histogram data accessor.\n\n    histoConfig =\n        Histo.initHistogramConfig\n            |> Histo.withSteps [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ]\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.HistogramConfig -> Chart.Internal.Type.HistogramConfig"},{"name":"withTitle","comment":" Sets an accessible title for the svg chart.\nDefault value: \"\"\n\n    Histo.init\n        |> Histo.withTitle \"This is a chart\"\n        |> Histo.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisTickFormat","comment":" Sets the formatting for the y axis ticks.\n\nDefaults to `Scale.tickFormat`\n\n    formatter =\n        Numeral.format \"0%\"\n\n    Histo.init\n        |> Histo.withYAxisTickFormat formatter\n        |> Histo.render (data, accessor)\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"}],"binops":[]},{"name":"Chart.Line","comment":" This is the line chart module from [elm-chart-builder](https://github.com/data-viz-lab/elm-chart-builder).\n\nI expects the X axis to plot time or linear data and the Y axis to plot linear data.\n\n\n# Chart Data Format\n\n@docs Accessor, AccessorTime, AccessorLinear, time, linear\n\n\n# Chart Initialization\n\n@docs init\n\n\n# Chart Rendering\n\n@docs render\n\n\n# Configuration setters\n\n@docs withXAxisContinousTickCount, withColorPalette, withTitle, withDesc, withXAxisContinousTickFormat, withXAxisContinousTicks, withYAxisContinousTickCount, withYAxisContinousTickFormat, withYAxisContinousTicks, withCurve, withXAxis, withYAxis, withXDomainTime, withYDomain, withLinearDomainX, withStackedLayout, withGroupedLayout\n\n@docs withSymbols\n\n","unions":[],"aliases":[{"name":"Accessor","comment":" The data accessors\n\nA line chart can have the X axis as linear or time data.\n\n    type Accessor data\n        = AccessorLinear (accessorLinear data)\n        | AccessorTime (accessorTime data)\n\n","args":["data"],"type":"Chart.Internal.Type.AccessorLinearTime data"},{"name":"AccessorLinear","comment":" The accessor structure for x linear lines.\n","args":["data"],"type":"{ xGroup : data -> String.String, xValue : data -> Basics.Float, yValue : data -> Basics.Float }"},{"name":"AccessorTime","comment":" The accessor structure for x time lines.\n","args":["data"],"type":"{ xGroup : data -> String.String, xValue : data -> Time.Posix, yValue : data -> Basics.Float }"}],"values":[{"name":"init","comment":" Initializes the line chart with a default config\n\n    data : List Data\n    data =\n        [ { groupLabel = \"A\"\n          , x = Time.millisToPosix 1579275175634\n          , y = 10\n          }\n        , { groupLabel = \"A\"\n          , x = Time.millisToPosix 1579285175634\n          , y = 16\n          }\n        , { groupLabel = \"B\"\n          , x = Time.millisToPosix 1579275175634\n          , y = 13\n          }\n        , { groupLabel = \"B\"\n          , x = Time.millisToPosix 1579285175634\n          , y = 23\n          }\n        ]\n\n    accessor : Line.Accessor data\n    accessor =\n        Line.time (Line.accessorTime .groupLabel .x .y)\n\n    Line.init\n        { margin = margin\n        , width = width\n        , height = height\n        }\n        |> Line.render (data, accessor)\n\n","type":"Chart.Line.RequiredConfig -> Chart.Internal.Type.Config"},{"name":"linear","comment":" The accessor constructor for x linear lines.\n\n    Line.linear (Line.AccessorLinear .groupLabel .x .y)\n\n","type":"Chart.Internal.Type.AccessorLinearStruct data -> Chart.Line.Accessor data"},{"name":"render","comment":" Renders the line chart, after initialisation and customisation\n\n    Line.init\n        |> Line.render ( data, accessor )\n\n","type":"( List.List data, Chart.Internal.Type.AccessorLinearTime data ) -> Chart.Internal.Type.Config -> Html.Html msg"},{"name":"time","comment":" The accessor constructor for x time lines.\n\n    Line.time (Line.AccessorTime .groupLabel .x .y)\n\n","type":"Chart.Internal.Type.AccessorTimeStruct data -> Chart.Line.Accessor data"},{"name":"withColorPalette","comment":" Sets the color palette for the chart.\n\n    palette =\n        -- From elm-visualization\n        Scale.Color.tableau10\n\n    Line.init\n        |> Line.withColorPalette palette\n        |> Line.render (data, accessor)\n\n","type":"List.List Color.Color -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withCurve","comment":" Sets the line curve shape\n\nDefaults to `Shape.linearCurve`\n\nSee [https://package.elm-lang.org/packages/gampleman/elm-visualization/latest/Shape](elm-visualization/latest/Shape)\nfor more info.\n\n    Line.init\n        |> Line.curve Shape.monotoneInXCurve\n        |> Line.render ( data, accessor )\n\n","type":"(List.List ( Basics.Float, Basics.Float ) -> SubPath.SubPath) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withDesc","comment":" Sets an accessible, long-text description for the svg chart.\n\nIt defaults to an empty string.\nThis shuld be set if no title nor description exists for the chart, for example in a sparkline.\n\n    Line.init\n        |> Line.withDesc \"This is an accessible chart, with a desc element\"\n        |> Line.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withGroupedLayout","comment":" Creates a grouped line chart.\n\n    Line.init\n        |> Line.withGroupedLayout\n        |> Line.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withLinearDomainX","comment":" Sets the Y domain of a linear line chart\n\nIf not set, the domain is calculated from the data.\nIf set on a linear line chart this setting will have no effect.\n\n    Line.init\n        |> Line.withLinearDomainX ( 0, 10 )\n        |> Line.render ( data, accessor )\n\n","type":"( Basics.Float, Basics.Float ) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withStackedLayout","comment":" Creates a stacked line chart.\n\nIt takes a direction: `diverging` or `noDirection`\n\n    Line.init\n        |> Line.withStackedLayout\n        |> Line.render ( data, accessor )\n\n","type":"Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withSymbols","comment":" Pass a list of symbols to the line chart, one per data group.\nIf the list is empty, no symbols are rendered.\n\nDefault value: []\n\n    defaultLayoutConfig\n        |> withSymbols [ Circle, Corner, Triangle ]\n\n","type":"List.List Chart.Internal.Symbol.Symbol -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withTitle","comment":" Sets an accessible title for the svg chart.\n\nIt defaults to an empty string.\nThis shuld be set if no title nor description exists for the chart, for example in a sparkline.\n\n    Line.init\n        |> Line.withTitle \"Line chart\"\n        |> Line.render ( data, accessor )\n\n","type":"String.String -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXAxis","comment":" Show or Hide the X axis\n\nDefault value: True\n\n    Line.init\n        |> Line.withXAxis False\n        |> Line.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXAxisContinousTickCount","comment":" Sets the approximate number of ticks for the X axis\n\nDefaults to elm-visualization `Scale.ticks`\n\n    Line.init\n        |> Line.withContinousDataTickCount 5\n        |> Line.render ( data, accessor )\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXAxisContinousTickFormat","comment":" Sets the tick formatting for the X axis\n\nDefaults to elm-visualization `Scale.tickFormat`\n\n    Line.init\n        |> Line.setXAxisContinousTickFormat (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render ( data, accessor )\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXAxisContinousTicks","comment":" Explicitly sets the ticks for the X axis\n\nDefaults to elm-visualization `Scale.ticks`\n\n    Line.init\n        |> Line.withContinousXTicks [ 1, 2, 3 ]\n        |> Line.render ( data, accessor )\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withXDomainTime","comment":" Sets the Y domain of a time line chart\n\nIf not set, the domain is calculated from the data.\nIf set on a linear line chart this setting will have no effect.\n\n    Line.init\n        |> Line.withXDomainTime ( Time.millisToPosix 1579275175634, 10 )\n        |> Line.render ( data, accessor )\n\n","type":"( Time.Posix, Time.Posix ) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxis","comment":" Show or hide the Y axis.\n\nDefault value: True\n\n    Line.init\n        |> Line.withYAxis False\n        |> Line.render data\n\n","type":"Basics.Bool -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisContinousTickCount","comment":" Sets the approximate number of ticks for the y axis\n\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.withContinousDataTickCount 5\n        |> Line.render ( data, accessor )\n\n","type":"Basics.Int -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisContinousTickFormat","comment":" Sets the formatting for ticks in the y axis\n\nDefaults to `Scale.tickFormat`\n\n    Line.init\n        |> Line.withContinousDataTicks (FormatNumber.format { usLocale | decimals = 0 })\n        |> Line.render ( data, accessor )\n\n","type":"(Basics.Float -> String.String) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYAxisContinousTicks","comment":" Explicitly sets the ticks for the Y axis\n\nDefaults to `Scale.ticks`\n\n    Line.init\n        |> Line.withYAxisContinousDataTicks [ 1, 2, 3 ]\n        |> Line.render ( data, accessor )\n\n","type":"List.List Basics.Float -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"},{"name":"withYDomain","comment":" Sets the Y domain of a line chart\n\nThis is always a linear domain, not a time domain.\nIf not set, the domain is calculated from the data.\nIf set on a linear line chart this setting will have no effect.\n\n    Line.init\n        |> Line.withYDomain ( Time.millisToPosix 1579275175634, Time.millisToPosix 1579375175634 )\n        |> Line.render ( data, accessor )\n\n","type":"( Basics.Float, Basics.Float ) -> Chart.Internal.Type.Config -> Chart.Internal.Type.Config"}],"binops":[]},{"name":"Chart.Symbol","comment":" Symbols can be added to charts to improve understanding and accessibility.\nCurrently stacked bar charts do not support symbols.\n\n\n# Symbols\n\n@docs Symbol\n@docs circle, corner, custom, triangle\n\n\n# Customisation\n\n@docs withGap, withIdentifier, withSize, withStyle\n\n","unions":[],"aliases":[{"name":"Symbol","comment":" The Symbol type\n","args":[],"type":"Chart.Internal.Symbol.Symbol"}],"values":[{"name":"circle","comment":" A circle symbol type\n\n    symbol : Symbol\n    symbol =\n        Symbol.circle\n\n","type":"Chart.Symbol.Symbol"},{"name":"corner","comment":" A corner symbol type\n\n    symbol : Symbol\n    symbol =\n        Symbol.corner\n\n","type":"Chart.Symbol.Symbol"},{"name":"custom","comment":" A custom symbol type\nIt requires a config where viewBoxDimensions is a tuple with viewBox width and height and paths is a list of strings for the d attribute of an svg path element. These values are usually copied from the 3rd and 4th arguments of the viewBox attribute on the svg icon.\n\n    symbol :\n        { viewBoxDimensions : ( Float, Float )\n        , paths : List String\n        }\n        -> Symbol\n    symbol =\n        Symbol.custom\n            { viewBoxDimensions = ( 640, 512 )\n            , paths = [ bicycleSymbol ]\n            }\n\n","type":"Chart.Symbol.RequiredCustomConfig -> Chart.Symbol.Symbol"},{"name":"triangle","comment":" A triangle symbol type\n\n    symbol : Symbol\n    symbol =\n        Symbol.triangle\n\n","type":"Chart.Symbol.Symbol"},{"name":"withGap","comment":" Sets the useGap boolean flag. It defaults to True.\nOnly for custom symbols on bar charts, where icons are drawn with a gap from the bar rectangles.\nBeware that, depending on the custom icon shape and on the orientation of the chart,\nthe icon could already have a gap and we do not want to add other space.\n\n    symbol : Bool -> Symbol -> Symbol\n    symbol =\n        Symbol.triangle\n            |> Symbol.withGap False\n\n","type":"Basics.Bool -> Chart.Symbol.Symbol -> Chart.Symbol.Symbol"},{"name":"withIdentifier","comment":" Sets the symbol identifier used in the [xlink:href](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href)\nIt can be omitted if the page has only one chart.\n\n    symbol : String -> Symbol -> Symbol\n    symbol =\n        Symbol.triangle\n            |> Symbol.withIdentifier \"chart-a-triangle-symbol\"\n\n","type":"String.String -> Chart.Symbol.Symbol -> Chart.Symbol.Symbol"},{"name":"withSize","comment":" Sets the size of the built-in symbols\nIt has no effect on custom symbols.\n\n    symbol : Float -> Symbol -> Symbol\n    symbol =\n        Symbol.triangle\n            |> Symbol.withSize\n\n","type":"Basics.Float -> Chart.Symbol.Symbol -> Chart.Symbol.Symbol"},{"name":"withStyle","comment":" Sets additional styles to symbol\nThe style precedence is: withStyle, withColor in the chart config, css rules.\nSo passing a color style here will override the chart and css color rules.\nThere is no compiler level validation here, any tuple of strings can be passed and if invalid will be ignored.\n\n    symbol : List ( String, String ) -> Symbol -> Symbol\n    symbol =\n        Symbol.triangle\n            |> Symbol.withStyle [ ( \"fill\", \"none\" ) ]\n\n","type":"List.List ( String.String, String.String ) -> Chart.Symbol.Symbol -> Chart.Symbol.Symbol"}],"binops":[]}]